#!/bin/bash

source "$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)/config/settings.sh"
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)/lib/core.sh"
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)/lib/utils.sh"
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)/lib/validation.sh"
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)/lib/dns.sh"
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)/lib/passive.sh"
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)/lib/active.sh"
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)/lib/scan.sh"

# Add trap for SIGINT and SIGTERM
trap 'CLEANUP' SIGINT SIGTERM

# Setup initial state
CREATE_TEMP_DIR

# Main execution flow
SHOW_VERSION

if [ $# -eq 0 ]; then
    SHOW_HELP
    exit 1
fi

# Command line argument parsing
if [ $# -eq 1 ]; then
    case "${1,,}" in
        "install")
            INSTALL_SCRIPT
            exit $?
            ;;
        "update")
            UPDATE_SCRIPT
            exit $?
            ;;
        "uninstall")
            UNINSTALL_SCRIPT
            exit $?
            ;;
        "-h" | "--help")
            LOG "INFO" "SHOW_HELP"
            SHOW_HELP
            exit 0
            ;;
        "-v" | "--version")
            LOG "INFO" "SHOW VERSION"
            exit 0
            ;;
        *)
            if VALIDATE_DOMAIN "$1"; then
                DOMAIN="$1"
                PASSIVE_SCAN_ENABLED=true
                ACTIVE_SCAN_ENABLED=true
                PATTERN_RECOGNITION_ENABLED=true
                VHOST_SCAN_ENABLED=true
                RECURSIVE_SCAN_ENABLED=false
            else
                LOG "INFO" "SHOW_HELP - INVALID argument"
                SHOW_HELP
                exit 1
            fi
            ;;
    esac
fi

while [[ "$#" -gt 0 ]]; do
    case $1 in
    -D | --debug)
        DEBUG=true
        if [[ "$2" != "" ]] && [[ ! "$2" =~ ^- ]]; then
            DEBUG_LOG="$2"
            shift
        fi
        ;;
    -V | --verbose)
        VERBOSE=true
        ;;
    -d | --domain)
        IS_EMPTY "$2" && echo -e "\n${RED}${BOLD}[ERROR]${NC} ${BOLD}Domain argument missing${NC}\n" && LOG "ERROR" "Domain argument missing" && exit 1
        DOMAIN="$2"
        shift
        ;;
    -w | --wordlist)
        IS_EMPTY "$2" && echo -e "\n${RED}${BOLD}[ERROR]${NC} ${BOLD}Wordlist argument missing${NC}\n" && LOG "ERROR" "Wordlist argument missing" && exit 1
        ! FILE_EXISTS "$2" && echo -e "\n${RED}${BOLD}[ERROR]${NC} ${BOLD}Wordlist file not found: $2${NC}\n" && LOG "ERROR" "Wordlist file not found: $2" && exit 1
        ! FILE_READABLE "$2" && echo -e "\n${RED}${BOLD}[ERROR]${NC} ${BOLD}File is not readable : $2${NC}\n" && LOG "ERROR" "Wordlist file not readable: $2" && exit 1
        WORDLIST_PATH="$2"
        shift
        ;;
    -o | --output)
        IS_EMPTY "$2" && echo -e "\n${RED}${BOLD}[ERROR]${NC} ${BOLD}Output file argument missing${NC}\n" && LOG "ERROR" "Output file argument missing" && exit 1
        OUTPUT="$2"
        shift
        ;;
    -r | --recursive)
        RECURSIVE_SCAN=true
        IS_EMPTY "$2" && echo -e "\n${RED}${BOLD}[ERROR]${NC} ${BOLD}Recursive depth argument missing${NC}\n" && LOG "ERROR" "Recursive depth argument missing" && exit 1
        ! IS_NUMBER "$2" && echo -e "\n${RED}${BOLD}[ERROR]${NC} ${BOLD}Invalid recursive depth: $2${NC}\n" && LOG "ERROR" "Invalid recursive depth: $2" && exit 1
        if [ "$2" -gt 0 ] && [ "$2" -lt 11 ]; then
            RECURSIVE_DEPTH="$2"
        else
            LOG "ERROR" "Recursive depth must be between 1 and 10"
            echo -e "\n${RED}${BOLD}[ERROR]${NC} ${BOLD}Recursive depth must be between 1 and 10${NC}\n"
            exit 1
        fi
        shift
        ;;
    -p | --passive)
        PASSIVE_SCAN_ENABLED=true
        ;;

    -a | --active)
        ACTIVE_SCAN_ENABLED=true
        ;;
    -R | --resolver)
        IS_EMPTY "$2" && echo -e "\n${RED}${BOLD}[ERROR]${NC} ${BOLD}Resolver file argument missing${NC}\n" && LOG "ERROR" "Resolver file argument missing" && exit 1
        ! FILE_EXISTS "$2" && echo -e "\n${RED}${BOLD}[ERROR]${NC} ${BOLD}Resolver file not found: $2${NC}\n" && LOG "ERROR" "Resolver file not found: $2" && exit 1
        ! FILE_READABLE "$2" && echo -e "\n${RED}${BOLD}[ERROR]${NC} ${BOLD}File is not readable : $2${NC}\n" && LOG "ERROR" "Resolver file not readable: $2" && exit 1
        FILE_EMPTY "$2" && echo -e "\n${RED}${BOLD}[ERROR]${NC} ${BOLD}Resolver file is empty : $2${NC}\n" && LOG "ERROR" "Resolver file is empty: $2" && exit 1

        RESOLVER_SCAN=true
        RESOLVER_FILE="$2"
        shift
        ;;
    --st-key)
        IS_EMPTY "$2" && echo -e "\n${RED}${BOLD}[ERROR]${NC} ${BOLD}SecurityTrails API key missing${NC}\n" && LOG "ERROR" "SecurityTrails API key missing" && exit 1
        ! VALIDATE_API_KEY "$2" "ST" && echo -e "\n${RED}${BOLD}[ERROR]${NC} ${BOLD}Invalid SecurityTrails API key format${NC}\n" && LOG "ERROR" "Invalid SecurityTrails API key format" && exit 1
        SECURITYTRAILS_API_KEY="$2"
        PASSIVE_SCAN_ENABLED=true
        shift
        ;;
    --vt-key)
        IS_EMPTY "$2" && echo -e "\n${RED}${BOLD}[ERROR]${NC} ${BOLD}VirusTotal API key missing${NC}\n" && LOG "ERROR" "VirusTotal API key missing" && exit 1
        VIRUSTOTAL_API_KEY="$2"
        PASSIVE_SCAN_ENABLED=true
        shift
        ;;
    --censys-id)
        IS_EMPTY "$2" && echo -e "\n${RED}${BOLD}[ERROR]${NC} ${BOLD}Censys API ID missing${NC}\n" && LOG "ERROR" "Censys API ID missing" && exit 1
        CENSYS_API_ID="$2"
        PASSIVE_SCAN_ENABLED=true
        shift
        ;;
    --censys-secret)
        IS_EMPTY "$2" && echo -e "\n${RED}${BOLD}[ERROR]${NC} ${BOLD}Censys API secret missing${NC}\n" && LOG "ERROR" "Censys API secret missing" && exit 1
        CENSYS_API_SECRET="$2"
        PASSIVE_SCAN_ENABLED=true
        shift
        ;;
    --vhost)
        VHOST_SCAN_ENABLED=true
        ;;
    --pattern)
        PATTERN_RECOGNITION_ENABLED=true
        ;;
    --vhost-port)
        IS_EMPTY "$2" && echo -e "\n${RED}${BOLD}[ERROR]${NC} ${BOLD}Port list missing${NC}\n" && LOG "ERROR" "Port list missing" && exit 1
        # Remove duplicate ports using sort -u
        VHOST_PORTS=($(echo "$2" | tr ',' '\n' | sort -un | tr '\n' ' '))
        # Validate ports
        for port in "${VHOST_PORTS[@]}"; do
            if ! [[ "$port" =~ ^[0-9]+$ ]] || [ "$port" -lt 1 ] || [ "$port" -gt 65535 ]; then
                echo -e "\n${RED}${BOLD}[ERROR]${NC} ${BOLD}Invalid port number: $port${NC}\n"
                LOG "ERROR" "Invalid port number: $port"
                exit 1
            fi
        done
        LOG "DEBUG" "Using unique ports: ${VHOST_PORTS[*]}"
        shift
        ;;
    --vhost-filter)
        IS_EMPTY "$2" && echo -e "\n${RED}${BOLD}[ERROR]${NC} ${BOLD}Filter argument missing${NC}\n" && LOG "ERROR" "Filter argument missing" && exit 1
        # Remove duplicate filters
        VHOST_FILTER=$(echo "$2" | tr ',' '\n' | sort -u | tr '\n' ',' | sed 's/,$//')
        LOG "DEBUG" "Using unique filters: $VHOST_FILTER"
        shift
        ;;
    --vhost-filter-type)
        IS_EMPTY "$2" && echo -e "\n${RED}${BOLD}[ERROR]${NC} ${BOLD}Filter type argument missing${NC}\n" && LOG "ERROR" "Filter type argument missing" && exit 1
        case "${2,,}" in
            "status"|"size"|"words"|"lines")
                VHOST_FILTER_TYPE="$2"
                ;;
            *)
                echo -e "\n${RED}${BOLD}[ERROR]${NC} ${BOLD}Invalid filter type. Use: status, size, words, or lines${NC}\n"
                LOG "ERROR" "Invalid filter type: $2"
                exit 1
                ;;
        esac
        shift
        ;;
    -t | --threads)
        IS_EMPTY "$2" && echo -e "\n${RED}${BOLD}[ERROR]${NC} ${BOLD}Thread count missing${NC}\n" && LOG "ERROR" "Thread count missing" && exit 1
        ! IS_NUMBER "$2" && echo -e "\n${RED}${BOLD}[ERROR]${NC} ${BOLD}Invalid thread count: $2${NC}\n" && LOG "ERROR" "Invalid thread count: $2" && exit 1
        if [ "$2" -gt 0 ] && [ "$2" -le 100 ]; then
            THREAD_COUNT="$2"
        else
            LOG "ERROR" "Thread count must be between 1 and 50"
            echo -e "\n${RED}${BOLD}[ERROR]${NC} ${BOLD}Thread count must be between 1 and 50${NC}\n"
            exit 1
        fi
        shift
        ;;
    --raw)
        RAW_OUTPUT=true
        ;;
    *)
        ! VALIDATE_DOMAIN "$1" && echo -e "\n${RED}${BOLD}[ERROR]${NC} ${BOLD}Invalid domain: $1${NC}\n" && LOG "ERROR" "Invalid domain: $1" && exit 1
        DOMAIN="$1"
        ;;
    esac
    shift
done

# Main execution
if [ "$DEBUG" = true ]; then
    # Override debug log if provided
    if [[ -n "$2" ]]; then
        DEBUG_LOG="$2"
    fi

    # Ensure log directory exists
    mkdir -p "$(dirname "$DEBUG_LOG")"

    if [[ -f "$DEBUG_LOG" ]]; then
        rm -f "$DEBUG_LOG" || {
            echo -e "\n${RED}${BOLD}[ERROR]${NC} Unable to remove log file: $DEBUG_LOG"
            exit 1
            CLEANUP
        }
    fi

    touch "$DEBUG_LOG" || {
        echo -e "\n${RED}${BOLD}[ERROR]${NC} Unable to create log file: $DEBUG_LOG"
        exit 1
    }
fi

# Modify the main scanning section to include interrupt checks:
if [[ -n "$DOMAIN" ]]; then
    SCAN_DOMAIN "$DOMAIN" || {
        echo -e "\n${RED}${BOLD}[ERROR]${NC} Scan failed for domain: $DOMAIN"
        exit 1
    }
fi

FORMAT_RESULTS "$DOMAIN" "$OUTPUT"
exit $?
